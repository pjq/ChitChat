import java.lang.System
import java.io.FileInputStream


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
//def keystorePropertiesFile = rootProject.file("upload_key.properties")

// Load the keystore properties from the key.properties file if it exists, otherwise use environment variables
//print("key.properties")
def signingEnabled = false

if (keystorePropertiesFile.exists()) {
    print("key.properties exists")
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    signingEnabled = true
} else if (System.getenv("KEY_ALIAS") && System.getenv("KEY_PASSWORD") && System.getenv("STORE_FILE") && System.getenv("STORE_PASSWORD")) {
    print("Environment variables found")
    keystoreProperties['keyAlias'] = System.getenv("KEY_ALIAS")
    keystoreProperties['keyPassword'] = System.getenv("KEY_PASSWORD")
    keystoreProperties['storeFile'] = System.getenv("STORE_FILE")
    keystoreProperties['storePassword'] = System.getenv("STORE_PASSWORD")
    signingEnabled = true
} else {
    print("Both key.properties and environment variables not found, signing disabled")
}



apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
//    compileSdkVersion flutter.compileSdkVersion
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    signingConfigs {
        if (signingEnabled) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        } else {
            release {
                defaultConfig {}
            }
        }
    }


    buildTypes {
        debug {
            if (signingEnabled) {
                signingConfig signingConfigs.release
            }
        }
        release {
            if (signingEnabled) {
                signingConfig signingConfigs.release
            }
            crunchPngs  true
            debuggable = false
            minifyEnabled = true
            zipAlignEnabled = true
//            isShrinkResources = true
//            proguardFiles("proguard-rules.pro")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "me.pjq.chitchat"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
//        minSdkVersion flutter.minSdkVersion
//        targetSdkVersion flutter.targetSdkVersion
        minSdkVersion 26
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

//    buildTypes {
//        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
//        }
//    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
